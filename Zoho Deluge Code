// data send from zoho creator to zoho book inside purchase order module 
CompanyName = input.Company_Name;
custdata = Add_Vendor[ID == CompanyName];
companyid = custdata.Vendor_ID;
mapp = Map();
arraylist = list();
for each  ele in input.Item_Details
{
	lineitemmap = Map();
	lineitemmap.put("item_id",ele.Item_Description.Item_ID);
	lineitemmap.put("name",ele.Item_Code);
	lineitemmap.put("description",ele.Item_Description.Product_Name);
	lineitemmap.put("rate",ele.Rate);
	lineitemmap.put("quantity",ele.Quantity);
	lineitemmap.put("item_total",ele.Amount);
	arraylist.add(lineitemmap);
}
// Handle delivery address
if(input.Delivery_Address == "Warehouses")
{
	wareh = Warehouse_Master[Warehouse_Name == input.Select_Warehouse.Warehouse_Name];
	mapp.put("warehouse_id",wareh.Warehouse_ID);
	mapp.put("delivery_org_address_id",wareh.Warehouse_ID);
}
else if(input.Delivery_Address == "Customers")
{
	cust = Add_Customer[Customer_Name == input.Select_Customer.Customer_Name];
	mapp.put("delivery_customer_id",cust.Customer_ID);
}
// Add basic PO info
mapp.put("vendor_id",companyid);
mapp.put("delivery_date",input.Delivery_On);
mapp.put("payment_terms_label",input.Payment_Terms);
mapp.put("reference_number",input.Our_Ref);
mapp.put("address",input.Address.address_line_1);
mapp.put("street2",input.Address.address_line_2);
mapp.put("city",input.Address.district_city);
mapp.put("attention",input.Select_Warehouse.Warehouse_Name);
mapp.put("state",input.Address.state_province);
mapp.put("zip",input.Address.postal_Code);
mapp.put("country",input.Address.country);
mapp.put("fax",input.Fax);
mapp.put("phone",input.Telephone);
mapp.put("line_items",arraylist);
mapp.put("date",input.Date_field);
mapp.put("purchaseorder_number",input.PO_No);
// ✅ Add custom fields for Discount, VAT, Total, Grand Total
customFieldsList = List();
// Discount Value
cf_discount = Map();
cf_discount.put("api_name","cf_discount_value");
cf_discount.put("value",input.Discount);
customFieldsList.add(cf_discount);
// VAT Amount (5%)
cf_vat = Map();
cf_vat.put("api_name","cf_vat_amount_5");
cf_vat.put("value",input.VAT_Amount_5);
customFieldsList.add(cf_vat);
// Total
cf_total = Map();
cf_total.put("api_name","cf_total_amount");
cf_total.put("value",input.Total);
customFieldsList.add(cf_total);
// Grand Total
cf_grand = Map();
cf_grand.put("api_name","cf_grand_total_amount");
cf_grand.put("value",input.Grand_Total);
customFieldsList.add(cf_grand);
// Attach custom fields to request map
mapp.put("custom_fields",customFieldsList);
// Log and create PO
info mapp;
createPO_Book = zoho.books.createRecord("purchaseorders","859704582",mapp,"books_connection");
info createPO_Book;
purchase = createPO_Book.get("purchaseorder");
// ✅ Assign PO ID back to Creator
if(purchase != null && purchase.get("purchaseorder_id") != null)
{
	input.PO_ID = purchase.get("purchaseorder_id").toLong();
	info "✅ Purchase Order Created Successfully. PO ID: " + input.PO_ID;
}
else
{
	info "❌ Failed to create PO. Response: " + createPO_Book.toString();
}











if(input.ID != 0)
{
	lastRecord = Quotation_Register[ID != 0] sort by ID desc;
	if(lastRecord.count() > 0)
	{
		lastInquiryNumber = lastRecord.Quote;
		// Ensure lastInquiryNumber is not empty or null before processing
		if(lastInquiryNumber != null && lastInquiryNumber != "")
		{
			// Extract the numeric part from the last inquiry number
			lastNumberPart = lastInquiryNumber.substring(lastInquiryNumber.length() - 3).toNumber();
			// Increment the number part
			nextNumberPart = (lastNumberPart + 1).toText();
			// Manually pad with zeros if the number is less than 3 digits
			if(nextNumberPart.length() < 4)
			{
				// Add zeros to the left to make it 3 digits
				nextNumberPart = "0".repeat(4 - nextNumberPart.length()) + nextNumberPart;
			}
		}
		else
		{
			// If lastInquiryNumber is invalid, start from 001
			nextNumberPart = "0001";
		}
		// Get the current month and last two digits of the year
		currentDate = zoho.currentdate;
		currentMonth = currentDate.toString("MM");
		currentYear = currentDate.toString("yy");
		// Generate the new SO_No
		nextInquiryNumber = "MESA" + currentYear + currentMonth + "-" + nextNumberPart;
	}
	else
	{
		currentDate = zoho.currentdate;
		currentMonth = currentDate.toString("MM");
		currentYear = currentDate.toString("yy");
		nextInquiryNumber = "MESA" + currentYear + currentMonth + "-" + "0001";
	}
	// Set the SO_No field
	input.Quote = nextInquiryNumber;
	disable Quote;
	// Disable the SO_No field after setting it
}





// data copy from one form into another also subform data from one form into another form of subform 

if(input.Sales_Order_Type == "Spares")
{
	itemsList = Collection();
	for each  soItem in input.Sales_Order_Item
	{
		row = Material_Request.Materials();
		row.Item_Name=soItem.Item;
		row.Item_Description=soItem.Item_Description;
		row.Issue_Qty=soItem.Qty;
		row.Article_No=soItem.AG_Article_Number;
		itemsList.insert(row);
	}
	mr = insert into Material_Request
	[
		Sales_Order_Number=input.SO_No
		PO_Ref=input.Customer_PO_Number
		Customer=input.Customer_Name
		Materials=itemsList
		Added_User=zoho.loginuser
	];
	info "Material Request with subform created.";
}



// Data fetch from zoho books into zoho creator report 

string getProds()
{
	organizationID = "804843409";
	pageList = {1,2};

	for each ele in pageList
	{
// 		info "Fetching Page: " + ele;

		resp = invokeurl
		[
			url : "https://www.zohoapis.com/books/v3/items?page=" + ele + "&per_page=1000&organization_id=" + organizationID
			type : GET
			connection : "zbooks"
		];

		itemsList = resp.get("items");
// 		info itemsList.size();
		for each fullItem in itemsList
        {
			exist = Inventory[Item_Id1 == fullItem.get("item_id")];
				if(exist.count() > 0)
				{}
				else 
                {
                
			itemid = fullItem.get("item_id");
// 			name = ifnull(fullItem.get("name"), "");
			rate = ifnull(fullItem.get("rate"), 0);
			status = ifnull(fullItem.get("status"), "");
			qty = ifnull(fullItem.get("available_stock"), 0).toDecimal();
			sku = ifnull(fullItem.get("sku"), "");
			unit = ifnull(fullItem.get("unit"), "");
			desc = ifnull(fullItem.get("description"), "");
			articleNum = ifnull(fullItem.get("cf_ag_article_number"), "");
			
			A = insert into Inventory
			[
				Added_User = zoho.loginuser
				Item_Id1 = itemid
				Status = status
				Ag_Article_Number = articleNum
				Item_ID = desc
				Qty = qty
				Price = rate
				SKU = sku
				Unit = unit
				Is_Combo_Product = "NO"
			];
			info A;
        }
		}

		if(resp.get("page_context").get("has_more_page") != true)
		{
			break;
		}
	}

	return "Sync completed";
}
